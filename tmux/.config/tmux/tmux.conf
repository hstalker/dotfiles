# Aim to have as many of the default keybindings still work as expected as
# possible. Try Prefix-? to see what remains of the defaults.
# Custom keybindings:
# C-Space' Prefix
# Space'   Send prefix to inner nested TMUX. E.g. Prefix+Space = Prefix
# -,/'     Terminal splits
# <F5>'    Reload configuration
# <F6>'    Toggle theme
# <F11>'   Toggle status bar
# c'       Create window in current working directory
# C-c'     Create session
# C-f'     Find session (Prefix+f for sessions)
# X'       Confirm-kill window
# C-x'     Confirm-kill other windows
# Q'       Confirm-kill session
# D'       Detach other clients from session
# H,J,K,L' Resize in directions (repeatable)
# C-hjkl'  Navigate to pane in direction (repeatable)
# hjkl'
# <,>'     Swap panes (with previous/next panes respectively)
# Tab'     Show detailed list of all available keybindings (includes custom
#          bindings)

###############################################################################
# Set useful environment variables
# Grab the tmux version (needs some formatting due to presence of alpha
# characters
run-shell 'tmux setenv -g TMUX_VERSION \
  $(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
setenv -g TMUX_THEME_CURRENT "light"

###############################################################################
# Option setting
# Needed for truecolour support
# We default to setting TERM to non-256 colour
set -g default-terminal "screen"
# And if TERM that connected to tmux has 256col or something similar in the
# name, then we set TERM inside tmux to screen-256color (tmux-256color causes
# issues on older machines with stale terminfo)
if 'echo "${TERM}" | egrep -q "256col|fbterm"' \
  'set -g default-terminal "screen-256color"'
# Should catch all truecolour supporting terminals
set -q -ga terminal-overrides ",*256col*:Tc"
# Stop tmux for making new splits be login shells (the default behaviour)
set -g default-command "${SHELL}"

# Faster command sequences
set -s escape-time 10

# Increase repeat timeout
set -sg repeat-time 400

set -s focus-events on
setw -g xterm-keys on

# Increase history size
set -g history-limit 10000

# Start window numbering from 1 (as it's left->right on keyboard)
set -g base-index 1
# Match pane numbering to that of windows
setw -g pane-base-index 1

# Automatically rename windows to match focused program in window
setw -g automatic-rename on
# Renumber the windows to fill in gaps when a window is closed
set -g renumber-windows on

# Set the terminal title
set -g set-titles on
set -g set-titles-string "#I:#W"

# Increase display time for pane indicators and status messages
set -g display-panes-time 800
set -g display-time 1000

# Change status line redraw interval
set -g status-interval 10

# Copy-mode configuration
# There's no point supporting copy-paste to system clipboard because:
# 1) We're inside tmux in a dumb terminal, in which case we're only copying
# within tmux using its internal paste buffers.
# 2) We're inside a GUI terminal, allowing us to use the terminal's
# capabilities to copy and paste with a mouse (maybe requiring a shift+click)
# in order to interact with the system clipboard.
# Using something like xclip (X), pbclips (MacOS) etc. is annoying to setup for
# multiple platforms.
# Prefer vi-style keybinds in copy mode
setw -g mode-keys vi
# Bind [ (standard keybinding) to entering copy mode
bind [ {
  copy-mode;
}
# bind-key syntax changed in 2.5 for vi-copy
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.5" | bc)" = 1 ]' \
  "bind-key -t vi-copy v begin-selection; \
  bind-key -t vi-copy V send -X select-line; \
  bind-key -t vi-copy C-v rectangle-toggle; \
  bind-key -t vi-copy y copy-selection-and-cancel;"
# Newer versions
if-shell -b \
  '[ "$(echo "$TMUX_VERSION >= 2.5" | bc)" = 1 ]' \
  "bind-key -T copy-mode-vi v send-keys -X begin-selection; \
  bind-key -T copy-mode-vi V send-keys -X select-line; \
  bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle; \
  bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel;"

# Support mouse options under tmux <2.1
set -q -g mouse-select-pane on
set -q -g mode-mouse on
set -q -g mouse-resize-pane on
set -q -g mouse-select-window on
set -q -g mouse on

# Support utf-8 under tmux <2.2 (automatic under >=2.2)
set -q -g utf8 on
set -q -g status-utf8 on
set -q -g mouse-utf8 on


###############################################################################
# Our keybindings
# Rebind prefix
set -g prefix C-Space
# Allow sending prefix to nested tmux by Prefix+Space
bind Space send-prefix

# Reloading configuration
bind F5 {
  display 'Reloading configuration...';
  source-file $XDG_CONFIG_HOME/tmux/tmux.conf;
}

# Create a session
bind C-c {
  new-session;
}

# Find session
bind C-f {
  command-prompt -p find-session 'switch-client -t %%';
}

# Split panes horizontally and vertically
bind '/' {
  split-window -h -c '#{pane_current_path}';
}
bind '-' {
  split-window -v -c '#{pane_current_path}';
}

# Pane navigation
# Prefix-hjkl navigation
bind -r h {
  select-pane -L # Left
}
bind -r j {
  select-pane -D # Down
}
bind -r k {
  select-pane -U # Up
}
bind -r l {
  select-pane -R # Right
}
# Use chorded C-hjkl without prefix key navigation
bind -nr C-h {
  select-pane -L
}
bind -nr C-j {
  select-pane -D
}
bind -nr C-k {
  select-pane -U
}
bind -nr C-l {
  select-pane -R
}
# Swap panes
bind > {
  swap-pane -D # Swap current with next
}
bind < {
  swap-pane -U # Swap current with previous
}
# Use C-arrows without prefix key to resize panes
bind -r H {
  resize-pane -L 2
}
bind -r J {
  resize-pane -D 2
}
bind -r K {
  resize-pane -U 2
}
bind -r L {
  resize-pane -R 2
}

# Create new window retaining cwd
bind c {
  new-window -c "#{pane_current_path}"
}

# Kill pane/window/session
bind X {
  confirm-before -p "Kill window #W? (y/n)" "kill-window";
}
bind C-x {
  confirm-before -p "Kill other windows? (y/n)" "kill-window -a";
}
bind Q {
  confirm-before -p "Kill session #S? (y/n)" kill-session;
}

# Detach this client from session
# Detach other clients from session
bind D {
  if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached!"';
}

# Toggle status bar
bind F11 {
  if -F '#{s/off//:status}' \
    'set status off' \
    'set status on'
}

# Implement theme toggling
bind F6 {
  if-shell '[ "$TMUX_THEME_CURRENT" = "light" ]' \
  {
    display "Toggling theme to dark...";
    setenv TMUX_THEME_CURRENT "dark";
  } \
  {
    display "Toggling theme to light...";
    setenv TMUX_THEME_CURRENT "light";
  };
  source "$XDG_CONFIG_HOME/tmux/tmux.conf";
}

# Show detailed list of every available keybindings in the tmux session
bind Tab {
  list-keys;
}

# Update changed environment variables on configuration load
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY\
  SHELL\
  TERM\
  PATH\
  LD_LIBRARY_PATH\
  CPATH\
  NAME\
  EMAIL\
  LANG\
  LC_ALL"


###############################################################################
# Load other configuration scripts (e.g. themes and local configuration)
if-shell '[ "$TMUX_THEME_CURRENT" = "light" ]' \
  'source-file "$XDG_CONFIG_HOME/tmux/light.conf"'
if-shell '[ "$TMUX_THEME_CURRENT" = "dark" ]' \
  'source-file "$XDG_CONFIG_HOME/tmux/dark.conf"'

# Load user-defined overrides only if file exists
if-shell '[ -r "$XDG_CONFIG_HOME/tmux/custom.conf" ]' \
  'source-file "$XDG_CONFIG_HOME/tmux/custom.conf"'

