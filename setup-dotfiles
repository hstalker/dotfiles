#! /usr/bin/env bash

# store the distro name in DISTRO_ vars
if type lsb_release >/dev/null 2>&1; then
  # A modern generic method
  DISTRO_OS=$(lsb_release -si)
  DISTRO_VERSION=$(lsb_release -sr)
  DISTRO_CODENAME=$(lsb_release -sc)
else
  # Fallback
  DISTRO_OS=$(uname -s)
  DISTRO_VERSION=$(uname -r)
  DISTRO_CODENAME=$DISTRO_VERSION
fi
case $(uname -m) in
  x86_64)
    DISTRO_BITS=64
    ;;
  i*86)
    DISTRO_BITS=32
    ;;
  *)
    DISTRO_BITS=?
    ;;
esac

# simple user prompt
# usage: if ask "prompt-string-here"; then
# or if ask "prompt-string-here" Y; then  for a yes default
ask() {
  local prompt default reply

  if [ "${2:-}" = "Y" ]; then
    prompt="Y/n"
    default=Y
  elif [ "${2:-}" = "N" ]; then
    prompt="y/N"
    default=N
  else
    prompt="y/n"
    default=
  fi

  while true; do
    echo -n "$1 [$prompt] "
    read reply </dev/tty
    if [ -z "$reply" ]; then
      reply=$default
    fi
    case "$reply" in
      Y*|y*) return 0 ;;
      N*|n*) return 1 ;;
    esac
  done
}

# Grabs the full directory path to this script
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# Add directories to stow here
DOTFILE_CONFIG_DIRS=(
  vim
  emacs
  tmux
  git
  bash
  dircolors
  xorg
  gpg
  ssh
  irb
  npm
  ack
  readline
)

# Useful utils for this install
. ${SCRIPT_DIR}/bash/.bashrc

is_stow_present () {
  command -v stow >/dev/null 2>&1
  if [[ $? ]]; then
    return 0
  else
    echo "Couldn't find stow!"
    return 1
  fi
}

init () {
  TO_CREATE=(
    ~/projects
    ~/.cache
    ~/.local/bin
    ~/.local/share
  )
  for f in ${TO_CREATE[@]}; do
    [[ ! -e ${f} ]] && echo "Creating ${f}..." && mkdir -p ${f}
  done

  git submodule update --init --recursive
}

link () {
  echo "Symlinking using GNU stow..."

  if ask "Proceed? (Y/n)" Y && is_stow_present; then
    echo "Stowing ${DOTFILE_CONFIG_DIRS[@]}..."
    stow --no-folding -d "${SCRIPT_DIR}" -t ~/ -S ${DOTFILE_CONFIG_DIRS[@]}
    [[ $? ]] && echo "Done!" || echo "Failed!"
  else
    echo "Cancelled"
  fi
}

# Unsymlink configs
unlink () {
  echo "Unsymlinking using GNU stow..."
  if ask "Proceed? (Y/n)" Y && is_stow_present; then
    echo "Stowing ${DOTFILE_CONFIG_DIRS[@]}..."
    stow --no-folding -d "${SCRIPT_DIR}" -t ~/ -D ${DOTFILE_CONFIG_DIRS[@]}
    [[ $? ]] && echo "Done!" || echo "Failed!"
  else
    echo "Cancelled"
  fi
}

init
unlink
link

