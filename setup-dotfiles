#! /usr/bin/env bash

# Grabs the full directory path to this script
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# Add directories to stow here
DOTFILE_CONFIG_DIRS=(
  vim
  emacs
  tmux
  git
  bash
  dircolors
  xorg
  gpg
  ssh
)

# Useful utils for this install
. ${SCRIPT_DIR}/bash/.config/bash/functions
. ${SCRIPT_DIR}/bash/.config/bash/exports

is_stow_present () {
  command -v stow >/dev/null 2>&1
  if [[ $? ]]; then
    return 0
  else
    echo "Couldn't find stow!"
    return 1
  fi
}

init () {
  TO_CREATE=(
    ~/projects
    ~/.cache
    ~/.local/bin
    ~/.local/share
  )
  for f in ${TO_CREATE[@]}; do
    [[ ! -e ${f} ]] && echo "Creating ${f}..." && mkdir -p ${f}
  done

  git submodule update --init --recursive
}

link () {
  echo "Symlinking using GNU stow..."

  if ask "Proceed? (Y/n)" Y && is_stow_present; then
    echo "Stowing ${DOTFILE_CONFIG_DIRS[@]}..."
    stow --no-folding -d "${SCRIPT_DIR}" -t ~/ -S ${DOTFILE_CONFIG_DIRS[@]}
    [[ $? ]] && echo "Done!" || echo "Failed!"
  else
    echo "Cancelled"
  fi
}

# Unsymlink configs
unlink () {
  echo "Unsymlinking using GNU stow..."
  if ask "Proceed? (Y/n)" Y && is_stow_present; then
    echo "Stowing ${DOTFILE_CONFIG_DIRS[@]}..."
    stow --no-folding -d "${SCRIPT_DIR}" -t ~/ -D ${DOTFILE_CONFIG_DIRS[@]}
    [[ $? ]] && echo "Done!" || echo "Failed!"
  else
    echo "Cancelled"
  fi
}

# Calls the correct platform's install script
install_tools () {
  echo "Installing packages & utilities..."
  if ask "Proceed? (Y/n)" Y; then
    if [ $( echo "${DISTRO_OS}" | grep -i 'debian' ) ] ; then
      echo "Detected debian"
      echo "Installing..."
      "${SCRIPT_DIR}/platform/debian/all-pkg"
      if [ $( echo "${DISTRO_CODENAME}" | grep -i 'stretch' ) ] ; then
        echo "Detected stretch"
        "${SCRIPT_DIR}/platform/debian/stretch-pkg"
      elif [ $( echo "${DISTRO_CODENAME}" | grep -i 'buster' ) ] ; then
        echo "Detected buster"
        "${SCRIPT_DIR}/platform/debian/buster-pkg"
      else
        echo "Unknown distro codename -- ${DISTRO_CODENAME}"
      fi
    else
      echo "No known platform detected"
      echo "Platform -- ${DISTRO_OS} - ${DISTRO_VERSION} - ${DISTRO_CODENAME}"
    fi

    echo "Setting up vim plugins..."
    vim +:PlugUpgrade +:PlugInstall +:PlugUpdate +:qa 2>/dev/null
    [[ $? ]] && echo "Done!" || echo "Failed!"

    #echo "Setting up emacs plugins..."
    #emacs -nw -batch --load "${XDG_CONFIG_HOME:-$HOME/.config}/emacs/init.el" \
    #  --eval "(progn (package-initialize) (kill-emacs 0))" 2>/dev/null
    #[[ $? ]] && echo "Done!" || echo "Failed!"
  else
    echo "Cancelled"
  fi
}

init
unlink
link
install_tools

